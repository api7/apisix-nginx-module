diff --git lib/resty/core/response.lua lib/resty/core/response.lua
index 891a07e..986de74 100644
--- lib/resty/core/response.lua
+++ lib/resty/core/response.lua
@@ -45,6 +45,61 @@ ffi.cdef[[
 ]]
 
 
+local ngx_lua_ffi_set_resp_header
+
+local MACOS = jit and jit.os == "OSX"
+
+if MACOS then
+    ffi.cdef[[
+        typedef struct {
+            ngx_http_request_t   *r;
+            const char           *key_data;
+            size_t                key_len;
+            int                   is_nil;
+            const char           *sval;
+            size_t                sval_len;
+            void                 *mvals;
+            size_t                mvals_len;
+            int                   override;
+            char                **errmsg;
+        } ngx_http_lua_set_resp_header_params_t;
+
+        int ngx_http_lua_ffi_set_resp_header_macos(
+            ngx_http_lua_set_resp_header_params_t *p);
+    ]]
+
+    local set_params = ffi.new("ngx_http_lua_set_resp_header_params_t")
+
+    ngx_lua_ffi_set_resp_header = function(r, key, key_len, is_nil,
+                                           sval, sval_len, mvals,
+                                           mvals_len, override, err)
+
+        set_params.r = r
+        set_params.key_data = key
+        set_params.key_len = key_len
+        set_params.is_nil = is_nil
+        set_params.sval = sval
+        set_params.sval_len = sval_len
+        set_params.mvals = mvals
+        set_params.mvals_len = mvals_len
+        set_params.override = override
+        set_params.errmsg = err
+
+        return C.ngx_http_lua_ffi_set_resp_header_macos(set_params)
+    end
+
+else
+    ngx_lua_ffi_set_resp_header = function(r, key, key_len, is_nil,
+                                           sval, sval_len, mvals,
+                                           mvals_len, override, err)
+
+        return C.ngx_http_lua_ffi_set_resp_header(r, key, key_len, is_nil,
+                                                  sval, sval_len, mvals,
+                                                  mvals_len, override, err)
+    end
+end
+
+
 local function set_resp_header(tb, key, value, no_override)
     local r = get_request()
     if not r then
@@ -61,8 +116,8 @@ local function set_resp_header(tb, key, value, no_override)
             error("invalid header value", 3)
         end
 
-        rc = C.ngx_http_lua_ffi_set_resp_header(r, key, #key, true, nil, 0, nil,
-                                                0, 1, errmsg)
+        rc = ngx_lua_ffi_set_resp_header(r, key, #key, true, nil, 0, nil,
+                                         0, 1, errmsg)
     else
         local sval, sval_len, mvals, mvals_len, buf
 
@@ -99,9 +154,9 @@ local function set_resp_header(tb, key, value, no_override)
         end
 
         local override_int = no_override and 0 or 1
-        rc = C.ngx_http_lua_ffi_set_resp_header(r, key, #key, false, sval,
-                                                sval_len, mvals, mvals_len,
-                                                override_int, errmsg)
+        rc = ngx_lua_ffi_set_resp_header(r, key, #key, false, sval,
+                                         sval_len, mvals, mvals_len,
+                                         override_int, errmsg)
     end
 
     if rc == 0 or rc == FFI_DECLINED then
