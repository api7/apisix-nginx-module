diff --git auto/os/linux auto/os/linux
index 02dcaf2..790bc80 100644
--- auto/os/linux
+++ auto/os/linux
@@ -215,6 +215,21 @@ ngx_feature_test="struct __user_cap_data_struct    data;
                   (void) SYS_capset"
 . auto/feature
 
+# netfilter_ipv4
+
+ngx_feature="netfilter_ipv4"
+ngx_feature_name="NGX_HAVE_NETFILTER_IPV4"
+ngx_feature_run=no
+ngx_feature_incs="#include <linux/netfilter_ipv4.h>"
+ngx_feature_path=
+ngx_feature_libs=
+ngx_feature_test="int so_original_dst;
+
+                  so_original_dst = SO_ORIGINAL_DST;
+
+                  (void) so_original_dst;"
+. auto/feature
+
 
 # crypt_r()
 
diff --git src/http/ngx_http_variables.c src/http/ngx_http_variables.c
index 4f0bd0e..218668b 100644
--- src/http/ngx_http_variables.c
+++ src/http/ngx_http_variables.c
@@ -132,6 +132,11 @@ static ngx_int_t ngx_http_variable_connection_requests(ngx_http_request_t *r,
 static ngx_int_t ngx_http_variable_connection_time(ngx_http_request_t *r,
     ngx_http_variable_value_t *v, uintptr_t data);
 
+#if (NGX_HAVE_NETFILTER_IPV4)
+static ngx_int_t ngx_http_variable_connection_dst(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data);
+#endif
+
 static ngx_int_t ngx_http_variable_nginx_version(ngx_http_request_t *r,
     ngx_http_variable_value_t *v, uintptr_t data);
 static ngx_int_t ngx_http_variable_hostname(ngx_http_request_t *r,
@@ -351,6 +356,11 @@ static ngx_http_variable_t  ngx_http_core_variables[] = {
     { ngx_string("connection_time"), NULL, ngx_http_variable_connection_time,
       0, NGX_HTTP_VAR_NOCACHEABLE, 0 },
 
+#if (NGX_HAVE_NETFILTER_IPV4)
+    { ngx_string("connection_original_dst"), NULL,
+      ngx_http_variable_connection_dst, 0, 0, 0 },
+#endif
+
     { ngx_string("nginx_version"), NULL, ngx_http_variable_nginx_version,
       0, 0, 0 },
 
@@ -2347,6 +2357,43 @@ ngx_http_variable_connection_time(ngx_http_request_t *r,
 }
 
 
+#if (NGX_HAVE_NETFILTER_IPV4)
+static ngx_int_t
+ngx_http_variable_connection_dst(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data)
+{
+    struct sockaddr_in  dst;
+    socklen_t           socklen;
+    int                 rn;
+    u_char             *p;
+
+    socklen = sizeof(struct sockaddr_in);
+
+    rn = getsockopt(r->connection->fd, SOL_IP, SO_ORIGINAL_DST, (void *) &dst,
+                    &socklen);
+    if (rn < 0) {
+        ngx_log_error(NGX_LOG_CRIT, r->connection->log, ngx_socket_errno,
+                      "getsockopt(SO_ORIGINAL_DST) failed");
+        return NGX_ERROR;
+    }
+
+    p = ngx_pnalloc(r->pool, NGX_SOCKADDR_STRLEN);
+    if (p == NULL) {
+        return NGX_ERROR;
+    }
+
+    v->len = ngx_sock_ntop((struct sockaddr *) &dst, socklen, p,
+                           NGX_SOCKADDR_STRLEN, dst.sin_port);
+    v->valid = 1;
+    v->no_cacheable = 0;
+    v->not_found = 0;
+    v->data = p;
+
+    return NGX_OK;
+}
+#endif
+
+
 static ngx_int_t
 ngx_http_variable_nginx_version(ngx_http_request_t *r,
     ngx_http_variable_value_t *v, uintptr_t data)
diff --git src/os/unix/ngx_linux_config.h src/os/unix/ngx_linux_config.h
index 88fef47..1d0d54b 100644
--- src/os/unix/ngx_linux_config.h
+++ src/os/unix/ngx_linux_config.h
@@ -107,6 +107,9 @@ typedef struct iocb  ngx_aiocb_t;
 #include <netinet/udp.h>
 #endif
 
+#if (NGX_HAVE_NETFILTER_IPV4)
+#include <linux/netfilter_ipv4.h>
+#endif
 
 #define NGX_LISTEN_BACKLOG        511
 
