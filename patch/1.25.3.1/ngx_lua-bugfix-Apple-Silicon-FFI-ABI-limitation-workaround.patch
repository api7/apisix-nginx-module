diff --git src/ngx_http_lua_headers.c src/ngx_http_lua_headers.c
index 54977dce..8098615d 100644
--- src/ngx_http_lua_headers.c
+++ src/ngx_http_lua_headers.c
@@ -1240,4 +1240,16 @@ ngx_http_lua_ngx_raw_header_cleanup(void *data)
 #endif
 
 
+#if (NGX_DARWIN)
+int
+ngx_http_lua_ffi_set_resp_header_macos(ngx_http_lua_set_resp_header_params_t *p)
+{
+    return ngx_http_lua_ffi_set_resp_header(p->r, p->key_data, p->key_len,
+                                            p->is_nil, p->sval, p->sval_len,
+                                            p->mvals, p->mvals_len,
+                                            p->override, p->errmsg);
+}
+#endif
+
+
 /* vi:set ft=c ts=4 sw=4 et fdm=marker: */
diff --git src/ngx_http_lua_headers_out.h src/ngx_http_lua_headers_out.h
index 944f57a4..eb3c7947 100644
--- src/ngx_http_lua_headers_out.h
+++ src/ngx_http_lua_headers_out.h
@@ -12,6 +12,22 @@
 #include "ngx_http_lua_common.h"
 
 
+#if (NGX_DARWIN)
+typedef struct {
+    ngx_http_request_t   *r;
+    const char           *key_data;
+    size_t                key_len;
+    int                   is_nil;
+    const char           *sval;
+    size_t                sval_len;
+    void                 *mvals;
+    size_t                mvals_len;
+    int                   override;
+    char                **errmsg;
+} ngx_http_lua_set_resp_header_params_t;
+#endif
+
+
 ngx_int_t ngx_http_lua_set_output_header(ngx_http_request_t *r,
     ngx_http_lua_ctx_t *ctx, ngx_str_t key, ngx_str_t value, unsigned override);
 int ngx_http_lua_get_output_header(lua_State *L, ngx_http_request_t *r,
