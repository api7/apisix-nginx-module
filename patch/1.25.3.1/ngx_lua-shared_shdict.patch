diff --git config config
index 0e572c8..a688cf6 100644
--- config
+++ config
@@ -269,7 +269,6 @@ HTTP_LUA_SRCS=" \
             $ngx_addon_dir/src/ngx_http_lua_clfactory.c \
             $ngx_addon_dir/src/ngx_http_lua_pcrefix.c \
             $ngx_addon_dir/src/ngx_http_lua_headerfilterby.c \
-            $ngx_addon_dir/src/ngx_http_lua_shdict.c \
             $ngx_addon_dir/src/ngx_http_lua_socket_tcp.c \
             $ngx_addon_dir/src/ngx_http_lua_api.c \
             $ngx_addon_dir/src/ngx_http_lua_logby.c \
@@ -334,7 +333,6 @@ HTTP_LUA_DEPS=" \
             $ngx_addon_dir/src/ngx_http_lua_clfactory.h \
             $ngx_addon_dir/src/ngx_http_lua_pcrefix.h \
             $ngx_addon_dir/src/ngx_http_lua_headerfilterby.h \
-            $ngx_addon_dir/src/ngx_http_lua_shdict.h \
             $ngx_addon_dir/src/ngx_http_lua_socket_tcp.h \
             $ngx_addon_dir/src/api/ngx_http_lua_api.h \
             $ngx_addon_dir/src/ngx_http_lua_logby.h \
diff --git src/api/ngx_http_lua_api.h src/api/ngx_http_lua_api.h
index 193c44e..48ab467 100644
--- src/api/ngx_http_lua_api.h
+++ src/api/ngx_http_lua_api.h
@@ -51,14 +51,6 @@ ngx_http_request_t *ngx_http_lua_get_request(lua_State *L);
 ngx_int_t ngx_http_lua_add_package_preload(ngx_conf_t *cf, const char *package,
     lua_CFunction func);
 
-ngx_int_t ngx_http_lua_shared_dict_get(ngx_shm_zone_t *shm_zone,
-    u_char *key_data, size_t key_len, ngx_http_lua_value_t *value);
-
-ngx_shm_zone_t *ngx_http_lua_find_zone(u_char *name_data, size_t name_len);
-
-ngx_shm_zone_t *ngx_http_lua_shared_memory_add(ngx_conf_t *cf, ngx_str_t *name,
-    size_t size, void *tag);
-
 ngx_http_lua_co_ctx_t *ngx_http_lua_get_cur_co_ctx(ngx_http_request_t *r);
 
 void ngx_http_lua_set_cur_co_ctx(ngx_http_request_t *r,
diff --git src/ngx_http_lua_api.c src/ngx_http_lua_api.c
index 0d3ec9c..b72f831 100644
--- src/ngx_http_lua_api.c
+++ src/ngx_http_lua_api.c
@@ -12,7 +12,6 @@
 
 #include "ngx_http_lua_common.h"
 #include "api/ngx_http_lua_api.h"
-#include "ngx_http_lua_shdict.h"
 #include "ngx_http_lua_util.h"
 
 
@@ -34,10 +33,6 @@ ngx_http_lua_get_request(lua_State *L)
 }
 
 
-static ngx_int_t ngx_http_lua_shared_memory_init(ngx_shm_zone_t *shm_zone,
-    void *data);
-
-
 ngx_int_t
 ngx_http_lua_add_package_preload(ngx_conf_t *cf, const char *package,
     lua_CFunction func)
@@ -83,136 +78,6 @@ ngx_http_lua_add_package_preload(ngx_conf_t *cf, const char *package,
 }
 
 
-ngx_shm_zone_t *
-ngx_http_lua_shared_memory_add(ngx_conf_t *cf, ngx_str_t *name, size_t size,
-    void *tag)
-{
-    ngx_http_lua_main_conf_t     *lmcf;
-    ngx_shm_zone_t              **zp;
-    ngx_shm_zone_t               *zone;
-    ngx_http_lua_shm_zone_ctx_t  *ctx;
-    ngx_int_t                     n;
-
-    lmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_lua_module);
-    if (lmcf == NULL) {
-        return NULL;
-    }
-
-    if (lmcf->shm_zones == NULL) {
-        lmcf->shm_zones = ngx_palloc(cf->pool, sizeof(ngx_array_t));
-        if (lmcf->shm_zones == NULL) {
-            return NULL;
-        }
-
-        if (ngx_array_init(lmcf->shm_zones, cf->pool, 2,
-                           sizeof(ngx_shm_zone_t *))
-            != NGX_OK)
-        {
-            return NULL;
-        }
-    }
-
-    zone = ngx_shared_memory_add(cf, name, (size_t) size, tag);
-    if (zone == NULL) {
-        return NULL;
-    }
-
-    if (zone->data) {
-        ctx = (ngx_http_lua_shm_zone_ctx_t *) zone->data;
-        return &ctx->zone;
-    }
-
-    n = sizeof(ngx_http_lua_shm_zone_ctx_t);
-
-    ctx = ngx_pcalloc(cf->pool, n);
-    if (ctx == NULL) {
-        return NULL;
-    }
-
-    ctx->lmcf = lmcf;
-    ctx->log = &cf->cycle->new_log;
-    ctx->cycle = cf->cycle;
-
-    ngx_memcpy(&ctx->zone, zone, sizeof(ngx_shm_zone_t));
-
-    zp = ngx_array_push(lmcf->shm_zones);
-    if (zp == NULL) {
-        return NULL;
-    }
-
-    *zp = zone;
-
-    /* set zone init */
-    zone->init = ngx_http_lua_shared_memory_init;
-    zone->data = ctx;
-
-    lmcf->requires_shm = 1;
-
-    return &ctx->zone;
-}
-
-
-static ngx_int_t
-ngx_http_lua_shared_memory_init(ngx_shm_zone_t *shm_zone, void *data)
-{
-    ngx_http_lua_shm_zone_ctx_t *octx = data;
-    ngx_shm_zone_t              *ozone;
-    void                        *odata;
-
-    ngx_int_t                    rc;
-    volatile ngx_cycle_t        *saved_cycle;
-    ngx_http_lua_main_conf_t    *lmcf;
-    ngx_http_lua_shm_zone_ctx_t *ctx;
-    ngx_shm_zone_t              *zone;
-
-    ctx = (ngx_http_lua_shm_zone_ctx_t *) shm_zone->data;
-    zone = &ctx->zone;
-
-    odata = NULL;
-    if (octx) {
-        ozone = &octx->zone;
-        odata = ozone->data;
-    }
-
-    zone->shm = shm_zone->shm;
-#if (nginx_version >= 1009000)
-    zone->noreuse = shm_zone->noreuse;
-#endif
-
-    if (zone->init(zone, odata) != NGX_OK) {
-        return NGX_ERROR;
-    }
-
-    dd("get lmcf");
-
-    lmcf = ctx->lmcf;
-    if (lmcf == NULL) {
-        return NGX_ERROR;
-    }
-
-    dd("lmcf->lua: %p", lmcf->lua);
-
-    lmcf->shm_zones_inited++;
-
-    if (lmcf->shm_zones_inited == lmcf->shm_zones->nelts
-        && lmcf->init_handler && !ngx_test_config)
-    {
-        saved_cycle = ngx_cycle;
-        ngx_cycle = ctx->cycle;
-
-        rc = lmcf->init_handler(ctx->log, lmcf, lmcf->lua);
-
-        ngx_cycle = saved_cycle;
-
-        if (rc != NGX_OK) {
-            /* an error happened */
-            return NGX_ERROR;
-        }
-    }
-
-    return NGX_OK;
-}
-
 
 ngx_http_lua_co_ctx_t *
 ngx_http_lua_get_cur_co_ctx(ngx_http_request_t *r)
diff --git src/ngx_http_lua_common.h src/ngx_http_lua_common.h
index 4c94629..5daf3dc 100644
--- src/ngx_http_lua_common.h
+++ src/ngx_http_lua_common.h
@@ -23,6 +23,8 @@
 #include <lualib.h>
 #include <lauxlib.h>
 
+#include "ngx_meta_lua_api.h"
+
 
 #if defined(NDK) && NDK
 #include <ndk.h>
@@ -74,6 +76,10 @@ typedef struct {
 #   error at least nginx 1.6.0 is required but found an older version
 #endif
 
+#if !defined(ngx_meta_lua_version) || ngx_meta_lua_version < 00001
+#   error ngx_meta_lua_module 0.0.1 or above is required
+#endif
+
 #if LUA_VERSION_NUM != 501
 #   error unsupported Lua language version
 #endif
@@ -178,9 +184,6 @@ typedef struct ngx_http_lua_posted_thread_s  ngx_http_lua_posted_thread_t;
 typedef struct ngx_http_lua_balancer_peer_data_s
     ngx_http_lua_balancer_peer_data_t;
 
-typedef ngx_int_t (*ngx_http_lua_main_conf_handler_pt)(ngx_log_t *log,
-    ngx_http_lua_main_conf_t *lmcf, lua_State *L);
-
 typedef ngx_int_t (*ngx_http_lua_srv_conf_handler_pt)(ngx_http_request_t *r,
     ngx_http_lua_srv_conf_t *lscf, lua_State *L);
 
@@ -237,24 +240,20 @@ struct ngx_http_lua_main_conf_s {
 #endif
 #endif
 
-    ngx_array_t         *shm_zones;  /* of ngx_shm_zone_t* */
-
-    ngx_array_t         *shdict_zones; /* shm zones of "shdict" */
-
     ngx_array_t         *preload_hooks; /* of ngx_http_lua_preload_hook_t */
 
     ngx_flag_t           postponed_to_rewrite_phase_end;
     ngx_flag_t           postponed_to_access_phase_end;
 
-    ngx_http_lua_main_conf_handler_pt    init_handler;
+    ngx_meta_lua_main_conf_handler_pt    init_handler;
     ngx_str_t                            init_src;
     u_char                              *init_chunkname;
 
-    ngx_http_lua_main_conf_handler_pt    init_worker_handler;
+    ngx_meta_lua_main_conf_handler_pt    init_worker_handler;
     ngx_str_t                            init_worker_src;
     u_char                              *init_worker_chunkname;
 
-    ngx_http_lua_main_conf_handler_pt    exit_worker_handler;
+    ngx_meta_lua_main_conf_handler_pt    exit_worker_handler;
     ngx_str_t                            exit_worker_src;
     u_char                              *exit_worker_chunkname;
 
@@ -286,8 +285,6 @@ struct ngx_http_lua_main_conf_s {
                      * main conf.
                      */
 
-    ngx_uint_t                      shm_zones_inited;
-
     ngx_http_lua_sema_mm_t         *sema_mm;
 
     ngx_uint_t           malloc_trim_cycle;  /* a cycle is defined as the number
@@ -317,7 +314,6 @@ struct ngx_http_lua_main_conf_s {
     unsigned             requires_rewrite:1;
     unsigned             requires_access:1;
     unsigned             requires_log:1;
-    unsigned             requires_shm:1;
     unsigned             requires_capture_log:1;
     unsigned             requires_server_rewrite:1;
 };
diff --git src/ngx_http_lua_directive.c src/ngx_http_lua_directive.c
index f42aae9..d427e78 100644
--- src/ngx_http_lua_directive.c
+++ src/ngx_http_lua_directive.c
@@ -25,7 +25,6 @@
 #include "ngx_http_lua_initby.h"
 #include "ngx_http_lua_initworkerby.h"
 #include "ngx_http_lua_exitworkerby.h"
-#include "ngx_http_lua_shdict.h"
 #include "ngx_http_lua_ssl_certby.h"
 #include "ngx_http_lua_lex.h"
 #include "api/ngx_http_lua_api.h"
@@ -76,91 +75,6 @@ enum {
 };
 
 
-char *
-ngx_http_lua_shared_dict(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
-{
-    ngx_http_lua_main_conf_t   *lmcf = conf;
-
-    ngx_str_t                  *value, name;
-    ngx_shm_zone_t             *zone;
-    ngx_shm_zone_t            **zp;
-    ngx_http_lua_shdict_ctx_t  *ctx;
-    ssize_t                     size;
-
-    if (lmcf->shdict_zones == NULL) {
-        lmcf->shdict_zones = ngx_palloc(cf->pool, sizeof(ngx_array_t));
-        if (lmcf->shdict_zones == NULL) {
-            return NGX_CONF_ERROR;
-        }
-
-        if (ngx_array_init(lmcf->shdict_zones, cf->pool, 2,
-                           sizeof(ngx_shm_zone_t *))
-            != NGX_OK)
-        {
-            return NGX_CONF_ERROR;
-        }
-    }
-
-    value = cf->args->elts;
-
-    ctx = NULL;
-
-    if (value[1].len == 0) {
-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
-                           "invalid lua shared dict name \"%V\"", &value[1]);
-        return NGX_CONF_ERROR;
-    }
-
-    name = value[1];
-
-    size = ngx_parse_size(&value[2]);
-
-    if (size <= 8191) {
-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
-                           "invalid lua shared dict size \"%V\"", &value[2]);
-        return NGX_CONF_ERROR;
-    }
-
-    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_lua_shdict_ctx_t));
-    if (ctx == NULL) {
-        return NGX_CONF_ERROR;
-    }
-
-    ctx->name = name;
-    ctx->main_conf = lmcf;
-    ctx->log = &cf->cycle->new_log;
-
-    zone = ngx_http_lua_shared_memory_add(cf, &name, (size_t) size,
-                                          &ngx_http_lua_module);
-    if (zone == NULL) {
-        return NGX_CONF_ERROR;
-    }
-
-    if (zone->data) {
-        ctx = zone->data;
-
-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
-                           "lua_shared_dict \"%V\" is already defined as "
-                           "\"%V\"", &name, &ctx->name);
-        return NGX_CONF_ERROR;
-    }
-
-    zone->init = ngx_http_lua_shdict_init_zone;
-    zone->data = ctx;
-
-    zp = ngx_array_push(lmcf->shdict_zones);
-    if (zp == NULL) {
-        return NGX_CONF_ERROR;
-    }
-
-    *zp = zone;
-
-    lmcf->requires_shm = 1;
-
-    return NGX_CONF_OK;
-}
-
-
 char *
 ngx_http_lua_code_cache(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
 {
@@ -196,6 +110,15 @@ ngx_http_lua_load_resty_core(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
 }
 
 
+char *
+ngx_http_lua_shdict_directive(ngx_conf_t *cf, ngx_command_t *cmd,
+    void *conf)
+{
+    return ngx_meta_lua_shdict_directive_helper(cf,
+                                                &ngx_http_lua_module);
+}
+
+
 char *
 ngx_http_lua_package_cpath(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
 {
@@ -1262,7 +1185,7 @@ ngx_http_lua_init_by_lua(ngx_conf_t *cf, ngx_command_t *cmd,
         return NGX_CONF_ERROR;
     }
 
-    lmcf->init_handler = (ngx_http_lua_main_conf_handler_pt) cmd->post;
+    lmcf->init_handler = (ngx_meta_lua_main_conf_handler_pt) cmd->post;
 
     if (cmd->post == ngx_http_lua_init_by_file) {
         name = ngx_http_lua_rebase_path(cf->pool, value[1].data,
@@ -1333,7 +1256,7 @@ ngx_http_lua_init_worker_by_lua(ngx_conf_t *cf, ngx_command_t *cmd,
 
     value = cf->args->elts;
 
-    lmcf->init_worker_handler = (ngx_http_lua_main_conf_handler_pt) cmd->post;
+    lmcf->init_worker_handler = (ngx_meta_lua_main_conf_handler_pt) cmd->post;
 
     if (cmd->post == ngx_http_lua_init_worker_by_file) {
         name = ngx_http_lua_rebase_path(cf->pool, value[1].data,
@@ -1401,7 +1324,7 @@ ngx_http_lua_exit_worker_by_lua(ngx_conf_t *cf, ngx_command_t *cmd,
 
     value = cf->args->elts;
 
-    lmcf->exit_worker_handler = (ngx_http_lua_main_conf_handler_pt) cmd->post;
+    lmcf->exit_worker_handler = (ngx_meta_lua_main_conf_handler_pt) cmd->post;
 
     if (cmd->post == ngx_http_lua_exit_worker_by_file) {
         name = ngx_http_lua_rebase_path(cf->pool, value[1].data,
diff --git src/ngx_http_lua_directive.h src/ngx_http_lua_directive.h
index 4bec5e3..d91315c 100644
--- src/ngx_http_lua_directive.h
+++ src/ngx_http_lua_directive.h
@@ -12,7 +12,7 @@
 #include "ngx_http_lua_common.h"
 
 
-char *ngx_http_lua_shared_dict(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
+char *ngx_http_lua_shdict_directive(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
 char *ngx_http_lua_package_cpath(ngx_conf_t *cf, ngx_command_t *cmd,
     void *conf);
 char *ngx_http_lua_package_path(ngx_conf_t *cf, ngx_command_t *cmd,
diff --git src/ngx_http_lua_exitworkerby.c src/ngx_http_lua_exitworkerby.c
index e8f6511..1a9f860 100644
--- src/ngx_http_lua_exitworkerby.c
+++ src/ngx_http_lua_exitworkerby.c
@@ -75,7 +75,8 @@ ngx_http_lua_exit_worker(ngx_cycle_t *cycle)
 
     ngx_http_lua_set_req(lmcf->lua, r);
 
-    (void) lmcf->exit_worker_handler(cycle->log, lmcf, lmcf->lua);
+    (void) lmcf->exit_worker_handler(cycle->log, lmcf->exit_worker_src,
+                                     lmcf->lua);
 
     ngx_destroy_pool(c->pool);
     return;
@@ -92,20 +93,12 @@ failed:
 
 ngx_int_t
 ngx_http_lua_exit_worker_by_inline(ngx_log_t *log,
-    ngx_http_lua_main_conf_t *lmcf, lua_State *L)
+    ngx_str_t init_src, lua_State *L)
 {
     int         status;
-    const char *chunkname;
 
-    if (lmcf->exit_worker_chunkname == NULL) {
-        chunkname = "=exit_worker_by_lua";
-
-    } else {
-        chunkname = (const char *) lmcf->exit_worker_chunkname;
-    }
-
-    status = luaL_loadbuffer(L, (char *) lmcf->exit_worker_src.data,
-                             lmcf->exit_worker_src.len, chunkname)
+    status = luaL_loadbuffer(L, (char *) init_src.data,
+                             init_src.len, "=exit_worker_by_lua")
              || ngx_http_lua_do_call(log, L);
 
     return ngx_http_lua_report(log, L, status, "exit_worker_by_lua");
@@ -113,12 +106,12 @@ ngx_http_lua_exit_worker_by_inline(ngx_log_t *log,
 
 
 ngx_int_t
-ngx_http_lua_exit_worker_by_file(ngx_log_t *log, ngx_http_lua_main_conf_t *lmcf,
+ngx_http_lua_exit_worker_by_file(ngx_log_t *log, ngx_str_t init_src,
     lua_State *L)
 {
     int         status;
 
-    status = luaL_loadfile(L, (char *) lmcf->exit_worker_src.data)
+    status = luaL_loadfile(L, (char *) init_src.data)
              || ngx_http_lua_do_call(log, L);
 
     return ngx_http_lua_report(log, L, status, "exit_worker_by_lua_file");
diff --git src/ngx_http_lua_exitworkerby.h src/ngx_http_lua_exitworkerby.h
index 3a4274c..ad8f63b 100644
--- src/ngx_http_lua_exitworkerby.h
+++ src/ngx_http_lua_exitworkerby.h
@@ -12,10 +12,10 @@
 
 
 ngx_int_t ngx_http_lua_exit_worker_by_inline(ngx_log_t *log,
-    ngx_http_lua_main_conf_t *lmcf, lua_State *L);
+    ngx_str_t init_src, lua_State *L);
 
 ngx_int_t ngx_http_lua_exit_worker_by_file(ngx_log_t *log,
-    ngx_http_lua_main_conf_t *lmcf, lua_State *L);
+    ngx_str_t init_src, lua_State *L);
 
 void ngx_http_lua_exit_worker(ngx_cycle_t *cycle);
 
diff --git src/ngx_http_lua_headerfilterby.c src/ngx_http_lua_headerfilterby.c
index 7155355..86c5875 100644
--- src/ngx_http_lua_headerfilterby.c
+++ src/ngx_http_lua_headerfilterby.c
@@ -19,7 +19,6 @@
 #include "ngx_http_lua_string.h"
 #include "ngx_http_lua_misc.h"
 #include "ngx_http_lua_consts.h"
-#include "ngx_http_lua_shdict.h"
 
 
 static ngx_http_output_header_filter_pt ngx_http_next_header_filter;
diff --git src/ngx_http_lua_initby.c src/ngx_http_lua_initby.c
index 1f956e7..b618311 100644
--- src/ngx_http_lua_initby.c
+++ src/ngx_http_lua_initby.c
@@ -14,22 +14,13 @@
 
 
 ngx_int_t
-ngx_http_lua_init_by_inline(ngx_log_t *log, ngx_http_lua_main_conf_t *lmcf,
+ngx_http_lua_init_by_inline(ngx_log_t *log, ngx_str_t init_src,
     lua_State *L)
 {
     int         status;
-    const char *chunkname;
 
-
-    if (lmcf->init_chunkname == NULL) {
-        chunkname = "=init_by_lua";
-
-    } else {
-        chunkname = (const char *) lmcf->init_chunkname;
-    }
-
-    status = luaL_loadbuffer(L, (char *) lmcf->init_src.data,
-                             lmcf->init_src.len, chunkname)
+    status = luaL_loadbuffer(L, (char *) init_src.data,
+                             init_src.len, "=init_by_lua")
              || ngx_http_lua_do_call(log, L);
 
     return ngx_http_lua_report(log, L, status, "init_by_lua");
@@ -37,12 +28,12 @@ ngx_http_lua_init_by_inline(ngx_log_t *log, ngx_http_lua_main_conf_t *lmcf,
 
 
 ngx_int_t
-ngx_http_lua_init_by_file(ngx_log_t *log, ngx_http_lua_main_conf_t *lmcf,
+ngx_http_lua_init_by_file(ngx_log_t *log, ngx_str_t init_src,
     lua_State *L)
 {
     int         status;
 
-    status = luaL_loadfile(L, (char *) lmcf->init_src.data)
+    status = luaL_loadfile(L, (char *) init_src.data)
              || ngx_http_lua_do_call(log, L);
 
     return ngx_http_lua_report(log, L, status, "init_by_lua_file");
diff --git src/ngx_http_lua_initby.h src/ngx_http_lua_initby.h
index 67ac0b6..cbd439a 100644
--- src/ngx_http_lua_initby.h
+++ src/ngx_http_lua_initby.h
@@ -12,10 +12,10 @@
 
 
 ngx_int_t ngx_http_lua_init_by_inline(ngx_log_t *log,
-    ngx_http_lua_main_conf_t *lmcf, lua_State *L);
+    ngx_str_t init_src, lua_State *L);
 
 ngx_int_t ngx_http_lua_init_by_file(ngx_log_t *log,
-    ngx_http_lua_main_conf_t *lmcf, lua_State *L);
+    ngx_str_t init_src, lua_State *L);
 
 
 #endif /* _NGX_HTTP_LUA_INITBY_H_INCLUDED_ */
diff --git src/ngx_http_lua_initworkerby.c src/ngx_http_lua_initworkerby.c
index 449e604..b76903c 100644
--- src/ngx_http_lua_initworkerby.c
+++ src/ngx_http_lua_initworkerby.c
@@ -295,7 +295,8 @@ ngx_http_lua_init_worker(ngx_cycle_t *cycle)
 
     ngx_http_lua_set_req(lmcf->lua, r);
 
-    (void) lmcf->init_worker_handler(cycle->log, lmcf, lmcf->lua);
+    (void) lmcf->init_worker_handler(cycle->log, lmcf->init_worker_src,
+                                     lmcf->lua);
 
     ngx_destroy_pool(c->pool);
     return NGX_OK;
@@ -316,20 +317,12 @@ failed:
 
 ngx_int_t
 ngx_http_lua_init_worker_by_inline(ngx_log_t *log,
-    ngx_http_lua_main_conf_t *lmcf, lua_State *L)
+    ngx_str_t init_worker_src, lua_State *L)
 {
     int         status;
-    const char *chunkname;
 
-    if (lmcf->init_worker_chunkname == NULL) {
-        chunkname = "=init_worker_by_lua";
-
-    } else {
-        chunkname = (const char *) lmcf->init_worker_chunkname;
-    }
-
-    status = luaL_loadbuffer(L, (char *) lmcf->init_worker_src.data,
-                             lmcf->init_worker_src.len, chunkname)
+    status = luaL_loadbuffer(L, (char *) init_worker_src.data,
+                             init_worker_src.len, "=init_worker_by_lua")
              || ngx_http_lua_do_call(log, L);
 
     return ngx_http_lua_report(log, L, status, "init_worker_by_lua");
@@ -337,12 +330,12 @@ ngx_http_lua_init_worker_by_inline(ngx_log_t *log,
 
 
 ngx_int_t
-ngx_http_lua_init_worker_by_file(ngx_log_t *log, ngx_http_lua_main_conf_t *lmcf,
-    lua_State *L)
+ngx_http_lua_init_worker_by_file(ngx_log_t *log,
+    ngx_str_t init_worker_src, lua_State *L)
 {
     int         status;
 
-    status = luaL_loadfile(L, (char *) lmcf->init_worker_src.data)
+    status = luaL_loadfile(L, (char *) init_worker_src.data)
              || ngx_http_lua_do_call(log, L);
 
     return ngx_http_lua_report(log, L, status, "init_worker_by_lua_file");
diff --git src/ngx_http_lua_initworkerby.h src/ngx_http_lua_initworkerby.h
index 40b2db0..d4c399c 100644
--- src/ngx_http_lua_initworkerby.h
+++ src/ngx_http_lua_initworkerby.h
@@ -12,10 +12,10 @@
 
 
 ngx_int_t ngx_http_lua_init_worker_by_inline(ngx_log_t *log,
-    ngx_http_lua_main_conf_t *lmcf, lua_State *L);
+    ngx_str_t init_worker_src, lua_State *L);
 
 ngx_int_t ngx_http_lua_init_worker_by_file(ngx_log_t *log,
-    ngx_http_lua_main_conf_t *lmcf, lua_State *L);
+    ngx_str_t init_worker_src, lua_State *L);
 
 ngx_int_t ngx_http_lua_init_worker(ngx_cycle_t *cycle);
 
diff --git src/ngx_http_lua_logby.c src/ngx_http_lua_logby.c
index b47058b..a31d424 100644
--- src/ngx_http_lua_logby.c
+++ src/ngx_http_lua_logby.c
@@ -21,7 +21,6 @@
 #include "ngx_http_lua_string.h"
 #include "ngx_http_lua_misc.h"
 #include "ngx_http_lua_consts.h"
-#include "ngx_http_lua_shdict.h"
 #if (NGX_HTTP_LUA_HAVE_MALLOC_TRIM)
 #include <malloc.h>
 #endif
diff --git src/ngx_http_lua_module.c src/ngx_http_lua_module.c
index fb10bf9..bc68497 100644
--- src/ngx_http_lua_module.c
+++ src/ngx_http_lua_module.c
@@ -11,6 +11,7 @@
 #include "ddebug.h"
 
 
+#include "ngx_meta_lua_api.h"
 #include "ngx_http_lua_directive.h"
 #include "ngx_http_lua_capturefilter.h"
 #include "ngx_http_lua_contentby.h"
@@ -125,7 +126,7 @@ static ngx_command_t ngx_http_lua_cmds[] = {
 
     { ngx_string("lua_shared_dict"),
       NGX_HTTP_MAIN_CONF|NGX_CONF_TAKE2,
-      ngx_http_lua_shared_dict,
+      ngx_http_lua_shdict_directive,
       0,
       0,
       NULL },
@@ -747,7 +748,6 @@ ngx_http_lua_init(ngx_conf_t *cf)
     ngx_int_t                   rc;
     ngx_array_t                *arr;
     ngx_http_handler_pt        *h;
-    volatile ngx_cycle_t       *saved_cycle;
     ngx_http_core_main_conf_t  *cmcf;
     ngx_http_lua_main_conf_t   *lmcf;
     ngx_pool_cleanup_t         *cln;
@@ -947,18 +947,11 @@ ngx_http_lua_init(ngx_conf_t *cf)
 
         ngx_http_lua_assert(lmcf->lua != NULL);
 
-        if (!lmcf->requires_shm && lmcf->init_handler) {
-            saved_cycle = ngx_cycle;
-            ngx_cycle = cf->cycle;
-
-            rc = lmcf->init_handler(cf->log, lmcf, lmcf->lua);
-
-            ngx_cycle = saved_cycle;
-
-            if (rc != NGX_OK) {
-                /* an error happened */
-                return NGX_ERROR;
-            }
+        if (ngx_meta_lua_post_init_handler(cf, lmcf->init_handler,
+                                           lmcf->init_src, lmcf->lua)
+            != NGX_OK)
+        {
+            return NGX_ERROR;
         }
 
         dd("Lua VM initialized!");
@@ -1018,11 +1011,8 @@ ngx_http_lua_create_main_conf(ngx_conf_t *cf)
      *      lmcf->watcher = NULL;
      *      lmcf->regex_cache_entries = 0;
      *      lmcf->jit_stack = NULL;
-     *      lmcf->shm_zones = NULL;
      *      lmcf->init_handler = NULL;
      *      lmcf->init_src = { 0, NULL };
-     *      lmcf->shm_zones_inited = 0;
-     *      lmcf->shdict_zones = NULL;
      *      lmcf->preload_hooks = NULL;
      *      lmcf->requires_header_filter = 0;
      *      lmcf->requires_body_filter = 0;
@@ -1030,7 +1020,6 @@ ngx_http_lua_create_main_conf(ngx_conf_t *cf)
      *      lmcf->requires_rewrite = 0;
      *      lmcf->requires_access = 0;
      *      lmcf->requires_log = 0;
-     *      lmcf->requires_shm = 0;
      */
 
     lmcf->pool = cf->pool;
diff --git src/ngx_http_lua_setby.c src/ngx_http_lua_setby.c
index 98e8d47..4994ccd 100644
--- src/ngx_http_lua_setby.c
+++ src/ngx_http_lua_setby.c
@@ -19,7 +19,6 @@
 #include "ngx_http_lua_string.h"
 #include "ngx_http_lua_misc.h"
 #include "ngx_http_lua_consts.h"
-#include "ngx_http_lua_shdict.h"
 #include "ngx_http_lua_util.h"
 
 
diff --git src/ngx_http_lua_shdict.h src/ngx_http_lua_shdict.h
deleted file mode 100644
index 67dd4d4..0000000
--- src/ngx_http_lua_shdict.h
+++ /dev/null
@@ -1,113 +0,0 @@
-
-/*
- * Copyright (C) Yichun Zhang (agentzh)
- */
-
-
-#ifndef _NGX_HTTP_LUA_SHDICT_H_INCLUDED_
-#define _NGX_HTTP_LUA_SHDICT_H_INCLUDED_
-
-
-#include "ngx_http_lua_common.h"
-
-
-typedef struct {
-    u_char                       color;
-    uint8_t                      value_type;
-    u_short                      key_len;
-    uint32_t                     value_len;
-    uint64_t                     expires;
-    ngx_queue_t                  queue;
-    uint32_t                     user_flags;
-    u_char                       data[1];
-} ngx_http_lua_shdict_node_t;
-
-
-typedef struct {
-    ngx_queue_t                  queue;
-    uint32_t                     value_len;
-    uint8_t                      value_type;
-    u_char                       data[1];
-} ngx_http_lua_shdict_list_node_t;
-
-
-typedef struct {
-    ngx_rbtree_t                  rbtree;
-    ngx_rbtree_node_t             sentinel;
-    ngx_queue_t                   lru_queue;
-} ngx_http_lua_shdict_shctx_t;
-
-
-typedef struct {
-    ngx_http_lua_shdict_shctx_t  *sh;
-    ngx_slab_pool_t              *shpool;
-    ngx_str_t                     name;
-    ngx_http_lua_main_conf_t     *main_conf;
-    ngx_log_t                    *log;
-} ngx_http_lua_shdict_ctx_t;
-
-
-typedef struct {
-    ngx_log_t                   *log;
-    ngx_http_lua_main_conf_t    *lmcf;
-    ngx_cycle_t                 *cycle;
-    ngx_shm_zone_t               zone;
-} ngx_http_lua_shm_zone_ctx_t;
-
-
-#if (NGX_DARWIN)
-typedef struct {
-    void                  *zone;
-    const unsigned char   *key;
-    size_t                 key_len;
-    int                   *value_type;
-    unsigned char        **str_value_buf;
-    size_t                *str_value_len;
-    double                *num_value;
-    int                   *user_flags;
-    int                    get_stale;
-    int                   *is_stale;
-    char                 **errmsg;
-} ngx_http_lua_shdict_get_params_t;
-
-
-typedef struct {
-    void                  *zone;
-    int                    op;
-    const unsigned char   *key;
-    size_t                 key_len;
-    int                    value_type;
-    const unsigned char   *str_value_buf;
-    size_t                 str_value_len;
-    double                 num_value;
-    long                   exptime;
-    int                    user_flags;
-    char                 **errmsg;
-    int                   *forcible;
-} ngx_http_lua_shdict_store_params_t;
-
-
-typedef struct {
-    void                  *zone;
-    const unsigned char   *key;
-    size_t                 key_len;
-    double                *num_value;
-    char                 **errmsg;
-    int                    has_init;
-    double                 init;
-    long                   init_ttl;
-    int                   *forcible;
-} ngx_http_lua_shdict_incr_params_t;
-#endif
-
-
-ngx_int_t ngx_http_lua_shdict_init_zone(ngx_shm_zone_t *shm_zone, void *data);
-void ngx_http_lua_shdict_rbtree_insert_value(ngx_rbtree_node_t *temp,
-    ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel);
-void ngx_http_lua_inject_shdict_api(ngx_http_lua_main_conf_t *lmcf,
-    lua_State *L);
-
-
-#endif /* _NGX_HTTP_LUA_SHDICT_H_INCLUDED_ */
-
-/* vi:set ft=c ts=4 sw=4 et fdm=marker: */
diff --git src/ngx_http_lua_util.c src/ngx_http_lua_util.c
index 8fd2656..0e5385e 100644
--- src/ngx_http_lua_util.c
+++ src/ngx_http_lua_util.c
@@ -12,6 +12,7 @@
 
 
 #include "nginx.h"
+#include "ngx_meta_lua_api.h"
 #include "ngx_http_lua_directive.h"
 #include "ngx_http_lua_util.h"
 #include "ngx_http_lua_exception.h"
@@ -28,7 +29,6 @@
 #include "ngx_http_lua_string.h"
 #include "ngx_http_lua_misc.h"
 #include "ngx_http_lua_consts.h"
-#include "ngx_http_lua_shdict.h"
 #include "ngx_http_lua_coroutine.h"
 #include "ngx_http_lua_socket_tcp.h"
 #include "ngx_http_lua_socket_udp.h"
@@ -117,7 +117,7 @@ static ngx_int_t ngx_http_lua_handle_rewrite_jump(lua_State *L,
 static int ngx_http_lua_thread_traceback(lua_State *L, lua_State *co,
     ngx_http_lua_co_ctx_t *coctx);
 static void ngx_http_lua_inject_ngx_api(lua_State *L,
-    ngx_http_lua_main_conf_t *lmcf, ngx_log_t *log);
+    ngx_cycle_t *cycle, ngx_http_lua_main_conf_t *lmcf, ngx_log_t *log);
 static void ngx_http_lua_inject_arg_api(lua_State *L);
 static int ngx_http_lua_param_set(lua_State *L);
 static ngx_int_t ngx_http_lua_output_filter(ngx_http_request_t *r,
@@ -817,13 +817,13 @@ ngx_http_lua_init_globals(lua_State *L, ngx_cycle_t *cycle,
     ngx_http_lua_inject_ndk_api(L);
 #endif /* defined(NDK) && NDK */
 
-    ngx_http_lua_inject_ngx_api(L, lmcf, log);
+    ngx_http_lua_inject_ngx_api(L, cycle, lmcf, log);
 }
 
 
 static void
-ngx_http_lua_inject_ngx_api(lua_State *L, ngx_http_lua_main_conf_t *lmcf,
-    ngx_log_t *log)
+ngx_http_lua_inject_ngx_api(lua_State *L, ngx_cycle_t *cycle,
+    ngx_http_lua_main_conf_t *lmcf, ngx_log_t *log)
 {
     lua_createtable(L, 0 /* narr */, 115 /* nrec */);    /* ngx.* */
 
@@ -845,7 +845,7 @@ ngx_http_lua_inject_ngx_api(lua_State *L, ngx_http_lua_main_conf_t *lmcf,
     ngx_http_lua_inject_req_api(log, L);
     ngx_http_lua_inject_resp_header_api(L);
     ngx_http_lua_create_headers_metatable(log, L);
-    ngx_http_lua_inject_shdict_api(lmcf, L);
+    ngx_meta_lua_inject_shdict_api(L, cycle, &ngx_http_lua_module);
     ngx_http_lua_inject_socket_tcp_api(log, L);
     ngx_http_lua_inject_socket_udp_api(log, L);
     ngx_http_lua_inject_uthread_api(log, L);
diff --git src/ngx_http_lua_util.h src/ngx_http_lua_util.h
index faea7a0..4c81ac5 100644
--- src/ngx_http_lua_util.h
+++ src/ngx_http_lua_util.h
@@ -334,7 +334,9 @@ ngx_http_lua_create_ctx(ngx_http_request_t *r)
         ngx_http_lua_assert(L != NULL);
 
         if (lmcf->init_handler) {
-            if (lmcf->init_handler(r->connection->log, lmcf, L) != NGX_OK) {
+            if (lmcf->init_handler(r->connection->log, lmcf->init_src, L)
+                != NGX_OK)
+            {
                 /* an error happened */
                 return NULL;
             }
