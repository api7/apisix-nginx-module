diff --git src/ngx_http_lua_socket_tcp.c src/ngx_http_lua_socket_tcp.c
index 230679f..106bd76 100644
--- src/ngx_http_lua_socket_tcp.c
+++ src/ngx_http_lua_socket_tcp.c
@@ -23,8 +23,8 @@ static int ngx_http_lua_socket_tcp(lua_State *L);
 static int ngx_http_lua_socket_tcp_bind(lua_State *L);
 static int ngx_http_lua_socket_tcp_connect(lua_State *L);
 #if (NGX_HTTP_SSL)
-static void ngx_http_lua_ssl_handshake_handler(ngx_connection_t *c);
-static int ngx_http_lua_ssl_handshake_retval_handler(ngx_http_request_t *r,
+static void ngx_http_lua_tls_handshake_handler(ngx_connection_t *c);
+static int ngx_http_lua_tls_handshake_retval_handler(ngx_http_request_t *r,
     ngx_http_lua_socket_tcp_upstream_t *u, lua_State *L);
 #endif
 static int ngx_http_lua_socket_tcp_receive(lua_State *L);
@@ -1632,7 +1632,7 @@ ngx_http_lua_socket_tcp_check_busy(ngx_http_request_t *r,
 
 
 int
-ngx_http_lua_ffi_socket_tcp_sslhandshake(ngx_http_request_t *r,
+ngx_http_lua_ffi_socket_tcp_tlshandshake(ngx_http_request_t *r,
     ngx_http_lua_socket_tcp_upstream_t *u, ngx_ssl_session_t *sess,
     int enable_session_reuse, ngx_str_t *server_name, int verify,
     int ocsp_status_req, STACK_OF(X509) *chain, EVP_PKEY *pkey,
@@ -1687,7 +1687,7 @@ ngx_http_lua_ffi_socket_tcp_sslhandshake(ngx_http_request_t *r,
 
         u->ssl_session_reuse = enable_session_reuse;
 
-        (void) ngx_http_lua_ssl_handshake_retval_handler(r, u, NULL);
+        (void) ngx_http_lua_tls_handshake_retval_handler(r, u, NULL);
 
         return NGX_OK;
     }
@@ -1713,12 +1713,12 @@ ngx_http_lua_ffi_socket_tcp_sslhandshake(ngx_http_request_t *r,
 
     if (sess != NULL) {
         if (ngx_ssl_set_session(c, sess) != NGX_OK) {
-            *errmsg = "ssl set session failed";
+            *errmsg = "tls set session failed";
             return NGX_ERROR;
         }
 
         ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0,
-                       "lua ssl set session: %p", sess);
+                       "lua tls set session: %p", sess);
 
     } else {
         u->ssl_session_reuse = enable_session_reuse;
@@ -1736,13 +1736,13 @@ ngx_http_lua_ffi_socket_tcp_sslhandshake(ngx_http_request_t *r,
         x509 = sk_X509_value(chain, 0);
         if (x509 == NULL) {
             ERR_clear_error();
-            *errmsg = "ssl fetch client certificate from chain failed";
+            *errmsg = "tls fetch client certificate from chain failed";
             return NGX_ERROR;
         }
 
         if (SSL_use_certificate(ssl_conn, x509) == 0) {
             ERR_clear_error();
-            *errmsg = "ssl set client certificate failed";
+            *errmsg = "tls set client certificate failed";
             return NGX_ERROR;
         }
 
@@ -1752,28 +1752,28 @@ ngx_http_lua_ffi_socket_tcp_sslhandshake(ngx_http_request_t *r,
             x509 = sk_X509_value(chain, i);
             if (x509 == NULL) {
                 ERR_clear_error();
-                *errmsg = "ssl fetch client intermediate certificate from "
+                *errmsg = "tls fetch client intermediate certificate from "
                           "chain failed";
                 return NGX_ERROR;
             }
 
             if (SSL_add1_chain_cert(ssl_conn, x509) == 0) {
                 ERR_clear_error();
-                *errmsg = "ssl set client intermediate certificate failed";
+                *errmsg = "tls set client intermediate certificate failed";
                 return NGX_ERROR;
             }
         }
 
         if (SSL_use_PrivateKey(ssl_conn, pkey) == 0) {
             ERR_clear_error();
-            *errmsg = "ssl set client private key failed";
+            *errmsg = "tls set client private key failed";
             return NGX_ERROR;
         }
     }
 
     if (server_name != NULL && server_name->data != NULL) {
         ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
-                       "lua ssl server name: \"%V\"", server_name);
+                       "lua tls server name: \"%V\"", server_name);
 
 #ifdef SSL_CTRL_SET_TLSEXT_HOSTNAME
         if (SSL_set_tlsext_host_name(c->ssl->connection,
@@ -1858,13 +1858,13 @@ new_ssl_name:
         ngx_add_timer(c->read, u->connect_timeout);
 
         u->conn_waiting = 1;
-        u->write_prepare_retvals = ngx_http_lua_ssl_handshake_retval_handler;
+        u->write_prepare_retvals = ngx_http_lua_tls_handshake_retval_handler;
 
         ngx_http_lua_cleanup_pending_operation(coctx);
         coctx->cleanup = ngx_http_lua_coctx_cleanup;
         coctx->data = u;
 
-        c->ssl->handler = ngx_http_lua_ssl_handshake_handler;
+        c->ssl->handler = ngx_http_lua_tls_handshake_handler;
 
         if (ctx->entered_content_phase) {
             r->write_event_handler = ngx_http_lua_content_wev_handler;
@@ -1876,7 +1876,7 @@ new_ssl_name:
         return NGX_AGAIN;
     }
 
-    ngx_http_lua_ssl_handshake_handler(c);
+    ngx_http_lua_tls_handshake_handler(c);
 
     if (rc == NGX_ERROR) {
         *errmsg = u->error_ret;
@@ -1888,7 +1888,7 @@ new_ssl_name:
 
 
 static void
-ngx_http_lua_ssl_handshake_handler(ngx_connection_t *c)
+ngx_http_lua_tls_handshake_handler(ngx_connection_t *c)
 {
     int                          waiting;
     ngx_int_t                    rc;
@@ -1933,7 +1933,7 @@ ngx_http_lua_ssl_handshake_handler(ngx_connection_t *c)
 
                 llcf = ngx_http_get_module_loc_conf(r, ngx_http_lua_module);
                 if (llcf->log_socket_errors) {
-                    ngx_log_error(NGX_LOG_ERR, dc->log, 0, "lua ssl "
+                    ngx_log_error(NGX_LOG_ERR, dc->log, 0, "lua tls "
                                   "certificate verify error: (%d: %s)",
                                   rc, u->error_ret);
                 }
@@ -1950,7 +1950,7 @@ ngx_http_lua_ssl_handshake_handler(ngx_connection_t *c)
 
                 llcf = ngx_http_get_module_loc_conf(r, ngx_http_lua_module);
                 if (llcf->log_socket_errors) {
-                    ngx_log_error(NGX_LOG_ERR, dc->log, 0, "lua ssl "
+                    ngx_log_error(NGX_LOG_ERR, dc->log, 0, "lua tls "
                                   "certificate does not match host \"%V\"",
                                   &u->ssl_name);
                 }
@@ -1965,7 +1965,7 @@ ngx_http_lua_ssl_handshake_handler(ngx_connection_t *c)
             ngx_http_lua_socket_handle_conn_success(r, u);
 
         } else {
-            (void) ngx_http_lua_ssl_handshake_retval_handler(r, u, NULL);
+            (void) ngx_http_lua_tls_handshake_retval_handler(r, u, NULL);
         }
 
         if (waiting) {
@@ -1994,12 +1994,12 @@ failed:
 
 
 int
-ngx_http_lua_ffi_socket_tcp_get_sslhandshake_result(ngx_http_request_t *r,
+ngx_http_lua_ffi_socket_tcp_get_tlshandshake_result(ngx_http_request_t *r,
     ngx_http_lua_socket_tcp_upstream_t *u, ngx_ssl_session_t **sess,
     const char **errmsg, int *openssl_error_code)
 {
     ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
-                   "lua cosocket get SSL handshake result for upstream: %p", u);
+                   "lua cosocket get TLS handshake result for upstream: %p", u);
 
     if (u->error_ret != NULL) {
         *errmsg = u->error_ret;
@@ -2015,7 +2015,7 @@ ngx_http_lua_ffi_socket_tcp_get_sslhandshake_result(ngx_http_request_t *r,
 
 
 static int
-ngx_http_lua_ssl_handshake_retval_handler(ngx_http_request_t *r,
+ngx_http_lua_tls_handshake_retval_handler(ngx_http_request_t *r,
     ngx_http_lua_socket_tcp_upstream_t *u, lua_State *L)
 {
     ngx_connection_t            *c;
@@ -2035,7 +2035,7 @@ ngx_http_lua_ssl_handshake_retval_handler(ngx_http_request_t *r,
         u->ssl_session_ret = ssl_session;
 
         ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0,
-                       "lua ssl save session: %p", ssl_session);
+                       "lua tls save session: %p", ssl_session);
     }
 
     return 0;
@@ -2043,7 +2043,7 @@ ngx_http_lua_ssl_handshake_retval_handler(ngx_http_request_t *r,
 
 
 void
-ngx_http_lua_ffi_ssl_free_session(ngx_ssl_session_t *sess)
+ngx_http_lua_ffi_tls_free_session(ngx_ssl_session_t *sess)
 {
     ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ngx_cycle->log, 0,
                    "lua ssl free session: %p", sess);
